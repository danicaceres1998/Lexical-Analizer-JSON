exit
token_type
token_type.regular_expresion
@current_token
continue
token.match? token_type.regular_expresion
@current_token
continue
@current_token.match? LITERAL_NUMBER.regular_expresion
@current_token.match? LITERAL_STRING.regular_expresion
@current_token.match? LITERAL_NUMBER.regular_expresion
@current_token
continue
token_type.regular_expresion
@current_token
continue
token.match? token_type.regular_expresion
@current_token
continue
@current_token
continue
@current_token.match? R_CURLY_BRACE.regular_expresion
@current_token
continue
@current_token
continue
@index
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
exit
@current_token
continue
@current_token
continue
@current_token
continue
@current_token.match? R_CURLY_BRACE.regular_expresion
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
exit
token_type.regular_expresion
@current_token
continue
@current_token.match? COMA.regular_expresion
unless @current_token.match? COMA.regular_expresion
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
token_type.regular_expresion
@current_token
continue
@current_token.match? R_CURLY_BRACE.regular_expresion
@current_token
continue
exit
continue
exit
@current_token
@current_token.match? R_CURLY_BRACE.regular_expresion
continue
exit
@current_token
continue
@current_token
continue
exit
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
token.match? token_type.regular_expresion
continue
@current_token
continue
exit
@current_token
continue
@current_token
token
continue
@current_token
continue
@current_token
continue
token
token_type
@current_token
continue
@current_token != R_SQUARE_BRACKET.lexeme
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
token.match? token_type.regular_expresion
continue
@current_token
continue
@current_token
continue
token.match? token_type.regular_expresion
@current_token
continue
@current_token.match? LITERAL_STRING.regular_expresion
@current_token
continue
@current_token
continue
token.match? token_type.regular_expresion
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
continue
token.match? token_type.regular_expresion
token_type
token
@current_token
continue
@current_token
continue
@current_token
continue
@current_token
exit
@lexical_comp_list
lexeme
continue
lexeme
@lexical_comp_list
continue
@lexical_comp_list
continue
lexeme
continue
lexeme
exit
@lexical_comp_list
continue
@lexical_comp_list
@lexical_comp_list[1]
continue
lexeme
continue
lexeme
exit
@lexical_comp_list
continue
lexeme
continue
lexeme
exit
@lexical_comp_list
continue
test
test = { token: lexeme, lex_comp: token_type.lexical_component }
{ token: lexeme, lex_comp: token_type.lexical_component }
lexeme
continue
lexeme
continue
exit
@simbols_table
@simbols_table['"personas"']
continue
@simbols_table.keys
@simbols_table[lexeme]
continue
exit
ex
ex.lexeme
